generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Attachment {
  id        String   @id
  name      String
  url       String   @db.Text
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([courseId])
}

model Category {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Course {
  id          String   @id
  userId      String
  title       String   @db.Text
  description String?  @db.Text
  imageUrl    String?  @db.Text
  price       Float?
  isPublished Boolean  @default(false)
  categoryId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([categoryId])
}

model Game {
  id          String     @id @default(cuid())
  userId      String
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    GameType
  questions   Question[]

  @@index([userId], map: "userId")
}

model Question {
  id                String   @id @default(cuid())
  gameId            String
  question          String
  answer            String
  options           Json?
  percentageCorrect Float?
  isCorrect         Boolean?
  questionType      GameType
  userAnswers       String?
  game              Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId], map: "gameId")
}

model Chapter {
  id          String   @id
  title       String
  description String?  @db.Text
  videoUrl    String?  @db.Text
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([courseId])
}

model MuxData {
  id         String  @id
  assetId    String
  playbackId String?
  chapterId  String  @unique
}

model Purchase {
  id        String   @id
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([courseId])
}

model StripeCustomer {
  id               String   @id
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime
}

model UserProgress {
  id          String   @id
  userId      String
  isCompleted Boolean  @default(false)
  chapterId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@unique([userId, chapterId])
  @@index([chapterId])
}

enum GameType {
  mcq
  open_ended
}

model topic_count {
  id    String @id @default(cuid())
  topic String @unique
  count Int
}