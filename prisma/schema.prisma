generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  description String?      @db.Text
  imageUrl    String?      @db.Text
  price       Float?
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]

  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId  String
  couse     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Chapter {
  id        String   @id @default(uuid())
  title     String
  description String? @db.Text
  videoUrl  String?  @db.Text
  position  Int
  isPublished Boolean @default(false)
  isFree   Boolean @default(false)

  muxData   MuxData?

  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id       String   @id @default(uuid())
  assetId  String
  playbackId String?

  chapterId String  @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id        String   @id @default(uuid())
  userId    String
  isCompleted Boolean @default(false)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model StripeCustomer {
  id      String   @id @default(uuid())
  userId  String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Game {
  id          String        @id
  userId      String
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    Game_gameType

  @@index([userId], map: "userId")
}

model Question {
  id                String                @id
  gameId            String
  question          String
  answer            String
  options           Json?
  percentageCorrect Float?
  isCorrect         Boolean?
  questionType      Question_questionType
  userAnsers        String?

  @@index([gameId], map: "gameId")
}

enum Game_gameType {
  mcq
  open_ended
}

enum Question_questionType {
  mcq
  open_ended
}
